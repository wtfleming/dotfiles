* General
mkdir ~/bin
mkdir ~/src

sudo apt-get install htop cmake


* Git
sudo apt-get install git

Add github ssh keys
https://help.github.com/articles/generating-ssh-keys/


* Dotfiles
git clone git@github.com:wtfleming/dotfiles.git
cp ~/src/dotfiles/Dotfiles/gitconfig ~/.gitconfig
cp ~/src/dotfiles/Dotfiles/bash_aliases ~/.bash_aliases
cp ~/src/dotfiles/Dotfiles/bashrc ~/.bashrc
cp ~/src/dotfiles/Dotfiles/bash_logout ~/.bash_logout
cp ~/src/dotfiles/Dotfiles/bash_profile ~/.bash_profile

* tmux
cp ~/src/dotfiles/Dotfiles/tmux.conf ~/.tmux.conf


* Emacs 26.1

sudo apt-get install build-essential libncurses5-dev
sudo apt-get build-dep emacs25
cd ~/bin
wget http://ftp.gnu.org/gnu/emacs/emacs-26.1.tar.gz
tar xzvf emacs-26.1.tar.gz
cd emacs-26.1
./configure
# server or embedded (beaglebone) config
# ./configure --with-xpm=no --with-gif=no --without-x
make
# optional make install

in bash_aliases add
alias emacs='/home/wtf/bin/emacs-26.1/src/emacs'
alias emacsclient='/home/wtf/bin/emacs-26.1/src/emacsclient'

cp -r ~/src/dotfiles/Dotfiles/emacs.d ~/.emacs.d/

cd ~/.emacs.d
git clone git@github.com:AndreaCrotti/yasnippet-snippets.git
mkdir ~/.emacs.d/snippets

First time loading need to m-x package-list-packages


Note that on raspbian on a raspberry pi you will need to uncomment the line in /etc/apt/sources.list
#deb-src http://archive.raspbian.org/raspbian/ jessie main contrib non-free rpi
In order to get apt-get build-dep working


Install org via package-list-packages to get latest version

Install latex files for org-mode export to pdf
sudo apt-get install texlive-latex-base texlive-latex-extra texlive-fonts-recommended

Link to it so .gitconfig can properly find it
ln -s ~/bin/emacs-26.1/src/emacs ~/bin/emacs



* Tensorflow and Keras
Based off https://www.pyimagesearch.com/2019/01/30/ubuntu-18-04-install-tensorflow-and-keras-for-deep-learning/

sudo add-apt-repository ppa:graphics-drivers/ppa
sudo apt-get update

# For GF1xx GPUs use `nvidia-390` (390.87)
# For G8x, G9x and GT2xx GPUs use `nvidia-340` (340.107)
# For NV4x and G7x GPUs use `nvidia-304` (304.137) End-Of-Life!   

sudo apt install nvidia-driver-418 nvidia-settings

sudo reboot now

# Once your machine is booted, youâ€™ll want to verify that NVIDIA drivers have been successfully installed:
$ nvidia-smi


# Install PTS and benchmark your gear:
sudo apt-get install phoronix-test-suite

# Run the benchmark:
phoronix-test-suite default-benchmark openarena xonotic tesseract gputest unigine-valley



* Docker

sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates
sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D

sudo emacs /etc/apt/sources.list.d/docker.list
Remove any existing entries
Add:
deb https://apt.dockerproject.org/repo ubuntu-xenial main


sudo apt-get update
sudo apt-get purge lxc-docker
apt-cache policy docker-engine
sudo apt-get update
sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual
sudo apt-get update
sudo apt-get install docker-engine

sudo service docker start
sudo docker run hello-world


* Erlang and Elixir

Install wxwidgets (need at least version 3)
This step is optional and only needed if you want to run graphical tools like Observer
sudo apt-key adv --fetch-keys http://repos.codelite.org/CodeLite.asc
sudo apt-add-repository 'deb http://repos.codelite.org/wx3.0.2/ubuntu/ trusty universe'
sudo apt-get install libwxbase3.0-0-unofficial libwxbase3.0-dev libwxgtk3.0-0-unofficial libwxgtk3.0-dev wx3.0-headers wx-common

# Ensure C libraries needed for erlang crypto like bcrypt are installed
sudo apt-get install erlang-dev

sudo apt-get install wget libssl-dev ncurses-dev m4 unixodbc-dev
wget http://www.erlang.org/download/otp_src_19.1.tar.gz
tar -xzvf otp_src_19.1.tar.gz
cd otp_src_19.1/
export ERL_TOP=`pwd`

# Specify where to install
./configure --prefix=/home/wtf/bin/erlang-19.1
make
# install so we can use tools like exrm to build a release
make install

Optionally run the tests to ensure the build is working properly
cd release/tests/test_server
$ERL_TOP/bin/erl -s ts install -s ts smoke_test batch -s init stop

To verify that everything is ok you should open `$ERL_TOP/release/tests/test_server/index.html`
in your web browser and make sure that there are zero failed test cases.



Download a precompiled elixir release from https://github.com/elixir-lang/elixir/releases/ and put it in $HOME/bin

wget https://github.com/elixir-lang/elixir/releases/download/v1.3.3/Precompiled.zip
unzip Precompiled.zip -d elixir-1.3.3

ln -s ~/bin/erlang-19.1/ erlang
ln -s ~/bin/elixir-1.3.3/ elixir

Install hex
mix local.hex

For phoenix on ubuntu we need to
sudo apt-get install inotify-tools
