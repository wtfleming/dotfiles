;; Turn off mouse interface early in startup to avoid momentary display
;(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))


(require 'package)
(add-to-list 'package-archives
  	     '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)

;; Check if the packages are installed; if not, install them.
(mapc
 (lambda (package)
   (or (package-installed-p package)
       (if (y-or-n-p (format "Package %s is missing. Install it? " package))
           (package-install package))))
 '(zenburn-theme scala-mode2 rainbow-mode expand-region cider))

(load-theme 'zenburn t)


;; expand-region
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)


;; Packages not available in the repositories
(add-to-list 'load-path "~/.emacs.d/")

;; Editing hadoop pig scripts https://github.com/motus/pig-mode
;;(load "pig-mode.el")

;; Use command as meta on OS X
(setq mac-option-modifier 'super)
(setq mac-command-modifier 'meta)

;; Override opening the buffer menu so it happens in
;; the same window, rather than a new one.
(global-set-key (kbd "C-x C-b") 'buffer-menu)


;; Only indent 2 spaces for clojure-mode
(setq lisp-indent-offset 2)

;; Map C-x C-u to undo
(define-key global-map "\C-x\C-u" 'undo)

;; Set font size to 12pt
(set-face-attribute 'default nil :height 120)

;; Open .gz, etc files for editing
(auto-compression-mode 1)

;; Emacs shell
; Dont echo passwords
(add-hook 'comint-output-filter-functions
      'comint-watch-for-password-prompt)

;; Backup files
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
   '(("." . "~/.saves"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups


;; Ensure line and column numbers are displayed on the mode line
(setq line-number-mode t) ; Default is on for line, but set it anyways
(setq column-number-mode t)


;; Don't show the splash screen
(setq inhibit-startup-screen t)

;; Org-mode settings
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(setq org-return-follows-link t)

;; Org Capture
(setq org-directory "~/org-mode/")
(global-set-key "\C-cc" 'org-capture)
(setq org-default-notes-file (concat org-directory "/notes.org"))
(setq org-capture-templates
  '(("t" "Todo" entry (file+headline (concat org-directory "/gtd.org") "Tasks")
      "* TODO %?\n %i\n")
     ("l" "Link" plain (file (concat org-directory "/links.org"))
       "- %?\n %x\n")))




;; Paren Mode
(setq show-paren-delay 0) ; how long to wait?
(show-paren-mode t) ; turn paren-mode on
;(setq show-paren-style 'expression) ; alternatives are 'parenthesis' and 'mixed'

;(set-face-background 'show-paren-match-face "#aaaaaa")
;(set-face-attribute 'show-paren-match-face nil
;        :weight 'bold :underline nil :overline nil :slant 'normal)
;(set-face-foreground 'show-paren-mismatch-face "red")
;(set-face-attribute 'show-paren-mismatch-face nil
;                    :weight 'bold :underline t :overline nil :slant 'normal)


;; don't let me accidentally exit out of emacs
;; use "M-x kill-emacs" instead
;;(global-unset-key "\C-x\C-c")

;; Dired
(setq dired-listing-switches "-lh")

;; Javascript mode
(setq js-indent-level 2)

;; Uniquify
(require 'uniquify)
(setq  uniquify-buffer-name-style 'post-forward-angle-brackets)

;; Save Place
(setq save-place-file "~/.emacs.d/saveplace") ;; keep my ~/ clean
(setq-default save-place t)                   ;; activate it for all buffers
(require 'saveplace)                          ;; get the package

;; Recent Files
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
(setq recentf-save-file "~/.emacs.d/.recentf")


;; Wind Move
; Move point from window to window using meta and the arrow keys,
; rather than having to use C-x o
(windmove-default-keybindings 'meta)


;; Show trailing whitespace
(setq-default show-trailing-whitespace t)

;; Highlight current line of characters
(global-hl-line-mode t)

;; Open emacs in front of the terminal window on OS X instead of behind
;; http://stackoverflow.com/questions/10171280/how-to-launch-gui-emacs-from-command-line-in-osx
(x-focus-frame nil)

;; Functions
(defun google ()
  "Google the selected region if any, display a query prompt otherwise."
  (interactive)
  (browse-url
   (concat
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
    (url-hexify-string (if mark-active
         (buffer-substring (region-beginning) (region-end))
       (read-string "Google: "))))))

(defun wtf-json-pretty-print ()
  "JSON pretty print the selected region."
  (interactive)
  (save-excursion
    (shell-command-on-region (mark) (point) "python -m json.tool" (buffer-name) t)))


;; Scala Mode 2
(add-hook 'scala-mode-hook '(lambda ()
  ;; Bind the 'newline-and-indent' command to RET (aka 'enter').
  ;; This is normally also available as C-j.
  ;; The 'newline-and-indent' command has the following functionality:
  ;; 1) Removes trailing whitespace from the current line.
  ;; 2) Creates a new line.
  ;; 3) Indents it.
  (local-set-key (kbd "RET") 'newline-and-indent)

  ;; Bind the 'join-line' command to M-RET. This command is normally
  ;; bound to M-^ which is hard to access.
  ;; The 'join-line' command has the effect or joining the current
  ;; line with the previous while fixing whitespace at the joint.
  (local-set-key (kbd "M-RET") 'join-line)
))

(setq default-directory "~/")

